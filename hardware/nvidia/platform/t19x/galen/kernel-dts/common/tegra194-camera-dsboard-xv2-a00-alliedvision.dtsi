/*
 * Copyright (c) 2015-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/ {
	host1x {
		vi@15c10000 {
			num-channels = <6>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					status = "okay";
					reg = <0>;
					dsboard_xv2_vi_in0: endpoint {
						status = "okay";
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&dsboard_xv2_csi_out0>;
					};
				};
				port@1 {
					status = "okay";
					reg = <1>;
					dsboard_xv2_vi_in1: endpoint {
						status = "okay";
						port-index = <1>;
						bus-width = <2>;
						remote-endpoint = <&dsboard_xv2_csi_out1>;
					};
				};
				port@2 {
					status = "okay";
					reg = <2>;
					dsboard_xv2_vi_in2: endpoint {
						status = "okay";
						port-index = <2>;
						bus-width = <2>;
						remote-endpoint = <&dsboard_xv2_csi_out2>;
					};
				};
				port@3 {
					status = "okay";
					reg = <3>;
					dsboard_xv2_vi_in3: endpoint {
						status = "okay";
						port-index = <3>;
						bus-width = <2>;
						remote-endpoint = <&dsboard_xv2_csi_out3>;
					};
				};
				port@4 {
					status = "okay";
					reg = <4>;
					dsboard_xv2_vi_in4: endpoint {
						status = "okay";
						port-index = <4>;
						bus-width = <2>;
						remote-endpoint = <&dsboard_xv2_csi_out4>;
					};
				};
				port@5 {
					status="disabled";
					reg = <5>;
					dsboard_xv2_vi_in5: endpoint {
						status="disabled";
						port-index = <5>;
						bus-width = <2>;
						remote-endpoint = <&dsboard_xv2_csi_out5>;
					};
				};
			};
		};

		nvcsi@15a00000 {
			num-channels = <6>;
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";
			channel@0 {
				status = "okay";
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						dsboard_xv2_csi_in0: endpoint@0 {
							status = "okay";
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&dsboard_xv2_avt_csi2_out0>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						dsboard_xv2_csi_out0: endpoint@1 {
							status = "okay";
							remote-endpoint = <&dsboard_xv2_vi_in0>;
						};
					};
				};
			};
			channel@1 {
				status = "okay";
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						dsboard_xv2_csi_in1: endpoint@2 {
							status = "okay";
							port-index = <1>;
							bus-width = <2>;
							remote-endpoint = <&dsboard_xv2_avt_csi2_out1>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						dsboard_xv2_csi_out1: endpoint@3 {
							status = "okay";
							remote-endpoint = <&dsboard_xv2_vi_in1>;
						};
					};
				};
			};
			channel@2 {
				status = "okay";
				reg = <2>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						dsboard_xv2_csi_in2: endpoint@4 {
							status = "okay";
							port-index = <2>;
							bus-width = <2>;
							remote-endpoint = <&dsboard_xv2_avt_csi2_out2>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						dsboard_xv2_csi_out2: endpoint@5 {
							status = "okay";
							remote-endpoint = <&dsboard_xv2_vi_in2>;
						};
					};
				};
			};
			channel@3 {
				status = "okay";
				reg = <3>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						dsboard_xv2_csi_in3: endpoint@6 {
							status = "okay";
							port-index = <3>;
							bus-width = <2>;
							remote-endpoint = <&dsboard_xv2_avt_csi2_out3>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						dsboard_xv2_csi_out3: endpoint@7 {
							status = "okay";
							remote-endpoint = <&dsboard_xv2_vi_in3>;
						};
					};
				};
			};
			channel@4 {
				status = "okay";
				reg = <4>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						dsboard_xv2_csi_in4: endpoint@8 {
							status = "okay";
							port-index = <4>;
							bus-width = <2>;
							remote-endpoint = <&dsboard_xv2_avt_csi2_out4>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						dsboard_xv2_csi_out4: endpoint@9 {
							status = "okay";
							remote-endpoint = <&dsboard_xv2_vi_in4>;
						};
					};
				};
			};
			channel@5 { //in next board revision, the port-index should be updated to 6-G.
				status="disabled";
				reg = <5>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status="disabled";
						reg = <0>;
						dsboard_xv2_csi_in5: endpoint@10 {
							status="disabled";
							port-index = <5>;
							bus-width = <2>;
							remote-endpoint = <&dsboard_xv2_avt_csi2_out5>;
						};
					};
					port@1 {
						status="disabled";
						reg = <1>;
						dsboard_xv2_csi_out5: endpoint@11 {
							status="disabled";
							remote-endpoint = <&dsboard_xv2_vi_in5>;
						};
					};
				};
			};
		};
	};

	i2c@3180000 {
		tca9548@70 {
			i2c@0 {
				status = "okay";
				avt_csi2_a@3c {
					compatible = "alliedvision,avt_csi2";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */
					devnode = "video0";

					/* Physical dimensions of sensor */
					//physical_w = "3.680";
					//physical_h = "2.760";

					sensor_model = "avt_csi2";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						num_lanes = "2";
						tegra_sinterface = "serial_a";
						discontinuous_clk = "no"; /* "yes"; */
						cil_settletime = "0";
						embedded_metadata_height = "0";

						/* not verified: */
						mclk_khz = "24000";
						phy_mode = "DPHY";
						dpcm_enable = "false";

						active_w = "5488"; /* "3264"; */
						active_h = "4112"; /* "2464"; */
						pixel_t = "bayer_bggr"; /* "bayer_rggb"; */
						readout_orientation = "0"; /* "90"; */
						line_length = "5488"; /* "3448"; */
						inherent_gain = "1";
						mclk_multiplier = "31.25"; /* "9.33"; */
						pix_clk_hz = "750000000"; /* "182400000"; */

						gain_factor = "16";
						framerate_factor = "1000000";
						exposure_factor = "1000000";
						min_gain_val = "16"; /* 1.0 */
						max_gain_val = "256"; /* 16.0 */ /* "170"; */
						step_gain_val = "1"; /* 0.125 */
						/* default_gain = "16"; */ /* 1.00x */
						min_hdr_ratio = "1";
						max_hdr_ratio = "64"; /* "1"; */
						min_framerate = "1500000"; /* 1.5 */ /* "2000000"; */
						max_framerate = "30000000"; /* 30 */ /* "21000000"; */
						step_framerate = "1";
						/* default_framerate = "21000000"; */ /* 21.0 fps */
						min_exp_time = "34"; /* us */ /* "13"; */
						max_exp_time = "550385"; /* us */ /* "683709"; */
						step_exp_time = "1";
						/* default_exp_time = "2495"; */ /* us */

						/* embedded_metadata_height = "2"; */
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							status = "okay";
							reg = <0>;
							dsboard_xv2_avt_csi2_out0: endpoint {
								status = "okay";
								port-index = <0>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_xv2_csi_in0>;
							};
						};
					};
				};
			};

			i2c@1 {
				avt_csi2_b@3c {
					compatible = "alliedvision,avt_csi2";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */
					devnode = "video1";

					/* Physical dimensions of sensor */
					//physical_w = "3.680";
					//physical_h = "2.760";

					sensor_model = "avt_csi2";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						num_lanes = "2";
						tegra_sinterface = "serial_b";
						discontinuous_clk = "no"; /* "yes"; */
						cil_settletime = "0";
						embedded_metadata_height = "0";

						/* not verified: */
						mclk_khz = "24000";
						phy_mode = "DPHY";
						dpcm_enable = "false";

						active_w = "5488"; /* "3264"; */
						active_h = "4112"; /* "2464"; */
						pixel_t = "bayer_bggr"; /* "bayer_rggb"; */
						readout_orientation = "0"; /* "90"; */
						line_length = "5488"; /* "3448"; */
						inherent_gain = "1";
						mclk_multiplier = "31.25"; /* "9.33"; */
						pix_clk_hz = "750000000"; /* "182400000"; */

						gain_factor = "16";
						framerate_factor = "1000000";
						exposure_factor = "1000000";
						min_gain_val = "16"; /* 1.0 */
						max_gain_val = "256"; /* 16.0 */ /* "170"; */
						step_gain_val = "1"; /* 0.125 */
						/* default_gain = "16"; */ /* 1.00x */
						min_hdr_ratio = "1";
						max_hdr_ratio = "64"; /* "1"; */
						min_framerate = "1500000"; /* 1.5 */ /* "2000000"; */
						max_framerate = "30000000"; /* 30 */ /* "21000000"; */
						step_framerate = "1";
						/* default_framerate = "21000000"; */ /* 21.0 fps */
						min_exp_time = "34"; /* us */ /* "13"; */
						max_exp_time = "550385"; /* us */ /* "683709"; */
						step_exp_time = "1";
						/* default_exp_time = "2495"; */ /* us */

						/* embedded_metadata_height = "2"; */
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							dsboard_xv2_avt_csi2_out1: endpoint {
								port-index = <1>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_xv2_csi_in1>;
							};
						};
					};
				};
			};

			i2c@2 {
				avt_csi2_c@3c {
					compatible = "alliedvision,avt_csi2";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */
					devnode = "video2";

					/* Physical dimensions of sensor */
					//physical_w = "3.680";
					//physical_h = "2.760";

					sensor_model = "avt_csi2";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						num_lanes = "2";
						tegra_sinterface = "serial_c";
						discontinuous_clk = "no"; /* "yes"; */
						cil_settletime = "0";
						embedded_metadata_height = "0";

						/* not verified: */
						mclk_khz = "24000";
						phy_mode = "DPHY";
						dpcm_enable = "false";

						active_w = "5488"; /* "3264"; */
						active_h = "4112"; /* "2464"; */
						pixel_t = "bayer_bggr"; /* "bayer_rggb"; */
						readout_orientation = "0"; /* "90"; */
						line_length = "5488"; /* "3448"; */
						inherent_gain = "1";
						mclk_multiplier = "31.25"; /* "9.33"; */
						pix_clk_hz = "750000000"; /* "182400000"; */

						gain_factor = "16";
						framerate_factor = "1000000";
						exposure_factor = "1000000";
						min_gain_val = "16"; /* 1.0 */
						max_gain_val = "256"; /* 16.0 */ /* "170"; */
						step_gain_val = "1"; /* 0.125 */
						/* default_gain = "16"; */ /* 1.00x */
						min_hdr_ratio = "1";
						max_hdr_ratio = "64"; /* "1"; */
						min_framerate = "1500000"; /* 1.5 */ /* "2000000"; */
						max_framerate = "30000000"; /* 30 */ /* "21000000"; */
						step_framerate = "1";
						/* default_framerate = "21000000"; */ /* 21.0 fps */
						min_exp_time = "34"; /* us */ /* "13"; */
						max_exp_time = "550385"; /* us */ /* "683709"; */
						step_exp_time = "1";
						/* default_exp_time = "2495"; */ /* us */

						/* embedded_metadata_height = "2"; */
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							dsboard_xv2_avt_csi2_out2: endpoint {
								port-index = <2>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_xv2_csi_in2>;
							};
						};
					};
				};
			};

			i2c@3 {
				avt_csi2_d@3c {
					compatible = "alliedvision,avt_csi2";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */
					devnode = "video3";

					/* Physical dimensions of sensor */
					//physical_w = "3.680";
					//physical_h = "2.760";

					sensor_model = "avt_csi2";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						num_lanes = "2";
						tegra_sinterface = "serial_d";
						discontinuous_clk = "no"; /* "yes"; */
						cil_settletime = "0";
						embedded_metadata_height = "0";

						/* not verified: */
						mclk_khz = "24000";
						phy_mode = "DPHY";
						dpcm_enable = "false";

						active_w = "5488"; /* "3264"; */
						active_h = "4112"; /* "2464"; */
						pixel_t = "bayer_bggr"; /* "bayer_rggb"; */
						readout_orientation = "0"; /* "90"; */
						line_length = "5488"; /* "3448"; */
						inherent_gain = "1";
						mclk_multiplier = "31.25"; /* "9.33"; */
						pix_clk_hz = "750000000"; /* "182400000"; */

						gain_factor = "16";
						framerate_factor = "1000000";
						exposure_factor = "1000000";
						min_gain_val = "16"; /* 1.0 */
						max_gain_val = "256"; /* 16.0 */ /* "170"; */
						step_gain_val = "1"; /* 0.125 */
						/* default_gain = "16"; */ /* 1.00x */
						min_hdr_ratio = "1";
						max_hdr_ratio = "64"; /* "1"; */
						min_framerate = "1500000"; /* 1.5 */ /* "2000000"; */
						max_framerate = "30000000"; /* 30 */ /* "21000000"; */
						step_framerate = "1";
						/* default_framerate = "21000000"; */ /* 21.0 fps */
						min_exp_time = "34"; /* us */ /* "13"; */
						max_exp_time = "550385"; /* us */ /* "683709"; */
						step_exp_time = "1";
						/* default_exp_time = "2495"; */ /* us */

						/* embedded_metadata_height = "2"; */
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							dsboard_xv2_avt_csi2_out3: endpoint {
								port-index = <3>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_xv2_csi_in3>;
							};
						};
					};
				};
			};

			i2c@4 {
				avt_csi2_e@3c {
					compatible = "alliedvision,avt_csi2";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */
					devnode = "video4";

					/* Physical dimensions of sensor */
					//physical_w = "3.680";
					//physical_h = "2.760";

					sensor_model = "avt_csi2";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						num_lanes = "2";
						tegra_sinterface = "serial_e";
						discontinuous_clk = "no"; /* "yes"; */
						cil_settletime = "0";
						embedded_metadata_height = "0";

						/* not verified: */
						mclk_khz = "24000";
						phy_mode = "DPHY";
						dpcm_enable = "false";

						active_w = "5488"; /* "3264"; */
						active_h = "4112"; /* "2464"; */
						pixel_t = "bayer_bggr"; /* "bayer_rggb"; */
						readout_orientation = "0"; /* "90"; */
						line_length = "5488"; /* "3448"; */
						inherent_gain = "1";
						mclk_multiplier = "31.25"; /* "9.33"; */
						pix_clk_hz = "750000000"; /* "182400000"; */

						gain_factor = "16";
						framerate_factor = "1000000";
						exposure_factor = "1000000";
						min_gain_val = "16"; /* 1.0 */
						max_gain_val = "256"; /* 16.0 */ /* "170"; */
						step_gain_val = "1"; /* 0.125 */
						/* default_gain = "16"; */ /* 1.00x */
						min_hdr_ratio = "1";
						max_hdr_ratio = "64"; /* "1"; */
						min_framerate = "1500000"; /* 1.5 */ /* "2000000"; */
						max_framerate = "30000000"; /* 30 */ /* "21000000"; */
						step_framerate = "1";
						/* default_framerate = "21000000"; */ /* 21.0 fps */
						min_exp_time = "34"; /* us */ /* "13"; */
						max_exp_time = "550385"; /* us */ /* "683709"; */
						step_exp_time = "1";
						/* default_exp_time = "2495"; */ /* us */

						/* embedded_metadata_height = "2"; */
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							dsboard_xv2_avt_csi2_out4: endpoint {
								port-index = <4>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_xv2_csi_in4>;
							};
						};
					};
				};
			};

			i2c@5 {
				avt_csi2_f@3c {
					status="disabled";
					compatible = "alliedvision,avt_csi2";
					/* I2C device address */
					reg = <0x3c>;

					/* V4L2 device node location */
					devnode = "video5";

					/* Physical dimensions of sensor */
					//physical_w = "3.680";
					//physical_h = "2.760";

					sensor_model = "avt_csi2";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						num_lanes = "2";
						tegra_sinterface = "serial_f";
						discontinuous_clk = "no"; /* "yes"; */
						cil_settletime = "0";
						embedded_metadata_height = "0";

						/* not verified: */
						mclk_khz = "24000";
						phy_mode = "DPHY";
						dpcm_enable = "false";

						active_w = "5488"; /* "3264"; */
						active_h = "4112"; /* "2464"; */
						pixel_t = "bayer_bggr"; /* "bayer_rggb"; */
						readout_orientation = "0"; /* "90"; */
						line_length = "5488"; /* "3448"; */
						inherent_gain = "1";
						mclk_multiplier = "31.25"; /* "9.33"; */
						pix_clk_hz = "750000000"; /* "182400000"; */

						gain_factor = "16";
						framerate_factor = "1000000";
						exposure_factor = "1000000";
						min_gain_val = "16"; /* 1.0 */
						max_gain_val = "256"; /* 16.0 */ /* "170"; */
						step_gain_val = "1"; /* 0.125 */
						/* default_gain = "16"; */ /* 1.00x */
						min_hdr_ratio = "1";
						max_hdr_ratio = "64"; /* "1"; */
						min_framerate = "1500000"; /* 1.5 */ /* "2000000"; */
						max_framerate = "30000000"; /* 30 */ /* "21000000"; */
						step_framerate = "1";
						/* default_framerate = "21000000"; */ /* 21.0 fps */
						min_exp_time = "34"; /* us */ /* "13"; */
						max_exp_time = "550385"; /* us */ /* "683709"; */
						step_exp_time = "1";
						/* default_exp_time = "2495"; */ /* us */

						/* embedded_metadata_height = "2"; */
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							dsboard_xv2_avt_csi2_out5: endpoint {
								port-index = <5>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_xv2_csi_in5>;
							};
						};
					};
				};
			};
		};
	};

	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		* Set this to the highest pix_clk_hz out of all available modes.
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <10>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <8>; /* <10>; */
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <160000>;
		//max_pixel_rate = <240000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		* The general guideline for naming badge_info contains 3 parts, and is as follows,
		* The first part is the camera_board_id for the module; if the module is in a FFD
		* platform, then use the platform name for this part.
		* The second part contains the position of the module, ex. “rear” or “front”.
		* The third part contains the last 6 characters of a part number which is found
		* in the module's specsheet from the vender.
		*/
		modules {
			module0 {
				status = "okay";
				badge = "dsboard_xv2_bottomleft_P5V27C";
				position = "bottomleft";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "avt_csi2 30-003c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@0/avt_csi2_a@3c";
				};
			};
			module1 {
				status = "okay";
				badge = "dsboard_xv2_centerleft_P5V27C";
				position = "centerleft";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "avt_csi2 31-003c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@1/avt_csi2_b@3c";
				};
			};
			module2 {
				status = "okay";
				badge = "dsboard_xv2_centerright_P5V27C";
				position = "centerright";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "avt_csi2 32-003c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@2/avt_csi2_c@3c";
				};
			};
			module3 {
				status = "okay";
				badge = "dsboard_xv2_topleft_P5V27C";
				position = "topleft";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "avt_csi2 33-003c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@3/avt_csi2_d@3c";
				};
			};
			module4 {
				status = "okay";
				badge = "dsboard_xv2_bottomright_P5V27C";
				position = "bottomright";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "avt_csi2 34-003c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@4/avt_csi2_e@3c";
				};
			};
			module5 {
				status = "disabled";
				badge = "dsboard_xv2_topright_P5V27C";
				position = "topright";
				orientation = "1";
				drivernode0 {
					status = "disabled";
					pcl_id = "v4l2_sensor";
					devname = "avt_csi2 35-003c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@70/i2c@5/avt_csi2_f@3c";
				};
			};
		};
	};
};
