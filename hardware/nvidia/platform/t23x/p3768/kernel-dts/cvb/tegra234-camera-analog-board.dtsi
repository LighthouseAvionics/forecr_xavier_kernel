/*
 * Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <dt-bindings/media/camera.h>

#define CAM0_PWDN	TEGRA234_MAIN_GPIO(H, 6)
#define CAM1_PWDN	TEGRA234_MAIN_GPIO(AC, 0)
#define CAM2_PWDN	TEGRA234_AON_GPIO(CC, 1) // GPIO04
#define CAM3_PWDN	TEGRA234_AON_GPIO(EE, 2) // GPIO10
#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)

// Test commands:
// 	$ v4l2-ctl --set-ctrl preferred_stride=1472
// 	$ gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,format=UYVY,width=720,height=480,framerate=25/1 ! xvimagesink

/ {
	tegra-capture-vi {
		status = "okay";
		num-channels = <1>;
		ports {
			#address-cells = <1>;
			#size-cells = <0>;
			port@0 {
				status = "okay";
				reg = <0>;
				cam_vi_in0: endpoint {
					status = "okay";
					port-index = <0>;
					bus-width = <1>;
					remote-endpoint = <&cam_csi_out0>;
				};
			};
		};
	};

	host1x@13e00000 {
		nvcsi@15a00000 {
			num-channels = <1>;
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";
			channel@0 {
				status = "okay";
				reg = <0>;
				discontinuous_clk = "no";

				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						status = "okay";
						reg = <0>;
						cam_csi_in0: endpoint@0 {
							status = "okay";
							port-index = <0>;
							bus-width = <1>;
							remote-endpoint = <&adv7280_out>;
						};
					};
					port@1 {
						status = "okay";
						reg = <1>;
						cam_csi_out0: endpoint@1 {
							status = "okay";
							bus-width = <1>;
							remote-endpoint = <&cam_vi_in0>;
						};
					};
				};
			};
		};
	};

	i2c@3180000 {
		pca9544a_70: pca9544a@70 {
			status = "okay";
			compatible = "nxp,pca9544";
			reg = <0x70>;
			#address-cells = <1>;
			#size-cells = <0>;
			vcc-supply = <&p3768_vdd_1v8>;
			skip_mux_detect;
			force_bus_start = <CAMERA_I2C_MUX_BUS(0)>;

			i2c@0 {
				reg = <0>;
				i2c-mux,deselect-on-exit;
				#address-cells = <1>;
				#size-cells = <0>;
			};
			i2c1: i2c@1 { // CAM_I2C on GMSL Board v1.4
				reg = <1>;
				i2c-mux,deselect-on-exit;
				#address-cells = <1>;
				#size-cells = <0>;
			};
			i2c@2 { // I2C2 on GMSL Board v1.4
				reg = <2>;
				i2c-mux,deselect-on-exit;
				#address-cells = <1>;
				#size-cells = <0>;

				adv7280m_a: composite-in@21 {
					status = "okay";
					compatible = "adi,adv7280-m";
					reg = <0x21>;
					devnode = "video0";
					physical_w = "4.713";
					physical_h = "3.494";
					sensor_model = "adv7280-m";
					use_sensor_mode_id = "false";
					mclk = "extperiph1";
					refclk_hz = <28636363>;

					embedded_metadata_height = "0";

					ports {
						#address-cells = <1>;
						#size-cells = <0>;

						port@0 {
							reg = <0>;
							adv7280_out: endpoint {
								status = "okay";
								port-index = <0>;
								bus-width = <1>;
								remote-endpoint = <&cam_csi_in0>;
							};
						};
					};
				};

			};

			i2c@3 { // I2C5 on GMSL Board v1.4
				reg = <3>;
				i2c-mux,deselect-on-exit;
				#address-cells = <1>;
				#size-cells = <0>;
			};
		};
	};
};
/ {
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <1>;
		max_lane_speed = <4000000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vendor.
		 */
		modules {
			module0 {
				status = "okay";
				badge = "analog_front";
				position = "front";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					devname = "adv7180 32-0021";
					proc-device-tree = "/proc/device-tree/i2c@3180000/pca9544a@70/i2c@2/composite-in@21";
				};
			};
		};
	};
};
